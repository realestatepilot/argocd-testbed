crds:
  install: false

global:
  revisionHistoryLimit: 1
configs:
    cm:
      exec.enabled: true

      url: http://argocd.ubuntu.localhost:8080
      dex.config: |
        connectors:
          - type: ldap
            id: ldap
            name: LDAP
            config:
              # beispiel für passwort-übergabe aus env-datei (ab dex 2.28)
              # dummy: {{ getenv "HOSTNAME" "http://127.0.0.1:5556/dex" }}
              # secrets defined in argocd-secrets
              host: $LDAP_HOST
              bindDN: $LDAP_BIND_DN
              bindPW: $LDAP_BIND_PW
              usernamePrompt: "Anmeldename"
              userSearch:
                baseDN: dc=evermind,dc=de
                # Optional filter to apply when searching the directory.
                filter: "(objectClass=person)"
                # username attribute used for comparing user entries. This will be translated
                # and combined with the other filter as "(<attr>=<username>)".
                username: uid
                # The following three fields are direct mappings of attributes on the user entry.
                # String representation of the user.
                idAttr: uidNumber
                # Required. Attribute to map to Email.
                emailAttr: mail
                # Maps to display name of users. No default value.
                nameAttr: displayName
              # Group search queries for groups given a user entry.
              groupSearch:
                # BaseDN to start the search from. It will translate to the query
                # "(&(objectClass=groupOfUniqueNames)(uniqueMember=<user uid>))".
                baseDN: ou=Gruppen,dc=evermind,dc=de
                # Optional filter to apply when searching the directory.
                # filter: "(objectClass=groupOfUniqueNames)"
                # Following list contains field pairs that are used to match a user to a group. It adds an additional
                # requirement to the filter that an attribute in the group must match the user's
                # attribute value.
                userMatchers:
                - userAttr: DN
                  groupAttr: uniqueMember
                # Represents group name.
                nameAttr: cn

      helm.valuesFileSchemes: >-
        secrets+gpg-import, secrets+gpg-import-kubernetes,
        secrets+age-import, secrets+age-import-kubernetes,
        secrets,
        https    

    params:
      server.insecure: true

    secret:
      createSecret: true
      argocdServerAdminPassword: $2a$10$rf1hVgJ2kOCvqPM8iNRyQeJ44Z148amqrYKwiNEcS0JR5FIppEswe
      argocdServerAdminPasswordMtime: "2021-05-01T10:11:12Z"

extraObjects:
  - apiVersion: argoproj.io/v1alpha1
    kind: Application
    metadata:
      name: app-bootstrap
    spec:
        name: app-bootstrap
        project: default
        source:
          repoURL: https://github.com/realestatepilot/argocd-testbed.git
          targetRevision: main
          path: "argocd-apps/"
          directory:
            recurse: true
        destination:
          server: https://kubernetes.default.svc
          namespace: default
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: argocd-vault
    data:
      vault.hcl: |-
        pid_file = "/tmp/vault.pid"

        auto_auth {
          method {
            type = "approle"

            config = {
              role_id_file_path = "/etc/vault.d/roleid"
              secret_id_file_path = "/etc/vault.d/secretid"
              remove_secret_id_file_after_reading = false
            }
            min_backoff = "10s"
            max_backoff = "5m"
            exit_on_err =  false
          }

          sink {
            type = "file"

            config = {
              path = "/vault-token/.vault_token"
            }
          }
        }      
      

repoServer:
  env:
    - name: HELM_PLUGINS
      value: /custom-tools/helm-plugins/
    - name: HELM_SECRETS_CURL_PATH
      value: /custom-tools/curl
    - name: HELM_SECRETS_SOPS_PATH
      value: /custom-tools/sops
    - name: HELM_SECRETS_VALS_PATH
      value: /custom-tools/vals
    - name: HELM_SECRETS_KUBECTL_PATH
      value: /custom-tools/kubectl
    - name: HELM_SECRETS_BACKEND
      value: sops
      # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
    - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
      value: "false"
    - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
      value: "true" 
    - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
      value: "false"      
    - name: HELM_SECRETS_WRAPPER_ENABLED
      value: "true"
    - name: HELM_SECRETS_DECRYPT_SECRETS_IN_TMP_DIR
      value: "true"
    - name: HELM_SECRETS_HELM_PATH
      value: /usr/local/bin/helm
  extraContainers: 
    - name: vault-agent
      command: ["/bin/sh", "-ec", "vault agent -config=/vault-config/vault.hcl"]
      image: hashicorp/vault:1.14
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        capabilities:
          add: ["IPC_LOCK"]
      env:
        - name: VAULT_ADDR
          value: https://vault.wolke8.it
      volumeMounts:
        - name: argocd-vault
          readOnly: true
          mountPath: /vault-config/
        - name: vault-token
          mountPath: /vault-token
        - name: appauth-role
          readOnly: true
          mountPath: /etc/vault.d/roleid
          subPath: roleid
        - name: appauth-secret
          readOnly: true
          mountPath: /etc/vault.d/secretid
          subPath: secretid
        # - mountPath: /home/argocd/cmp-server/plugins
        #   name: plugins
        # # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.
        # - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        #   subPath: my-plugin.yaml
        #   name: argocd-cmp-cm
        # # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps
        # # mitigate path traversal attacks.
        # - mountPath: /tmp
        #   name: cmp-tmp

  volumes:
    - name: custom-tools
      emptyDir: {}
    - name: gpg-secret
      secret:
        secretName: gpg-key
    - name: age-secret
      secret:
        secretName: age-key
    - name: argocd-vault
      configMap: 
        name: argocd-vault
        defaultMode: 420
    - name: vault-token
      emptyDir: {}
    - name: appauth-role
      secret:
        secretName: vault-approle-credentials
        items:
          - key: roleid
            path: roleid
        defaultMode: 420
    - name: appauth-secret
      secret:
        secretName: vault-approle-credentials
        items:
          - key: secretid
            path: secretid
        defaultMode: 420      

  volumeMounts:
    - mountPath: /custom-tools
      name: custom-tools
    - mountPath: /usr/local/sbin/helm
      subPath: helm
      name: custom-tools      
    - name: gpg-secret
      mountPath: /tenant1.key.gpg
      subPath: tenant1.key.gpg
    - name: age-secret
      mountPath: /tenant1.key.age
      subPath: tenant1.key.age
    - name: vault-token
      mountPath: /vault-token


  initContainers:
    - name: download-tools
      image: debian:12
      imagePullPolicy: IfNotPresent
      command: [sh, -ec]
      env:
        - name: HELM_SECRETS_VERSION
          value: "4.5.1"
        - name: KUBECTL_VERSION
          value: "1.26.1"
        - name: VALS_VERSION
          value: "0.24.0"
        - name: SOPS_VERSION
          value: "3.7.3"
      args:
        - |
          apt-get update; apt-get install -y wget
          mkdir -p /custom-tools/helm-plugins
          wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /custom-tools/helm-plugins -xzf-;
          
          wget -qO /custom-tools/curl https://github.com/moparisthebest/static-curl/releases/latest/download/curl-amd64
          wget -qO /custom-tools/sops https://github.com/getsops/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux
          wget -qO /custom-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl

          wget -qO- https://github.com/helmfile/vals/releases/download/v${VALS_VERSION}/vals_${VALS_VERSION}_linux_amd64.tar.gz | tar -xzf- -C /custom-tools/ vals;

          #patch wrapper to get current VAULT_TOKEN routine to env
          cat /custom-tools/helm-plugins/helm-secrets/scripts/wrapper/helm.sh | awk 'NR==1 {print; print "export VAULT_TOKEN=$(cat /vault-token/.vault_token)"} NR!=1' > /custom-tools/helm-plugins/helm-secrets/scripts/wrapper/helm-patched.sh
          
          cp /custom-tools/helm-plugins/helm-secrets/scripts/wrapper/helm-patched.sh /custom-tools/helm
          
          chmod +x /custom-tools/*
          
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools