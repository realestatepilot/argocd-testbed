configs:
    secret:
        createSecret: true
        argocdServerAdminPassword: $2a$10$rf1hVgJ2kOCvqPM8iNRyQeJ44Z148amqrYKwiNEcS0JR5FIppEswe
        argocdServerAdminPasswordMtime: "2021-05-01T10:11:12Z"

server:
    extraArgs:
        - --insecure
    ingress:
        enabled: true
        ingressClassName: nginx
        # annotations:
        #     kubernetes.io/tls-acme: "true"
        hosts:
            - argocd.ubuntu.localhost
    rbacConfig:
        policy.default: role:readonly
        # verweist auf die default eingebaute admin-rolle
        policy.csv: |
            g, resp-kubernetes-admin, role:admin
        #   # p, role:org-admin, applications, *, */*, allow

    configEnabled: true
    config:
        helm.valuesFileSchemes: >-
            secrets+gpg-import, secrets+gpg-import-kubernetes,
            secrets+age-import, secrets+age-import-kubernetes,
            secrets,
            https    
        url: http://argocd.ubuntu.localhost:8080
        dex.config: |
            connectors:
              - type: ldap
                id: ldap
                name: LDAP
                config:
                  # beispiel für passwort-übergabe aus env-datei (ab dex 2.28)
                  # dummy: {{ getenv "HOSTNAME" "http://127.0.0.1:5556/dex" }}
                  # secrets defined in argocd-secrets
                  host: $LDAP_HOST
                  bindDN: $LDAP_BIND_DN
                  bindPW: $LDAP_BIND_PW
                  usernamePrompt: "Anmeldename"
                  userSearch:
                    baseDN: dc=evermind,dc=de
                    # Optional filter to apply when searching the directory.
                    filter: "(objectClass=person)"
                    # username attribute used for comparing user entries. This will be translated
                    # and combined with the other filter as "(<attr>=<username>)".
                    username: uid
                    # The following three fields are direct mappings of attributes on the user entry.
                    # String representation of the user.
                    idAttr: uidNumber
                    # Required. Attribute to map to Email.
                    emailAttr: mail
                    # Maps to display name of users. No default value.
                    nameAttr: displayName
                  # Group search queries for groups given a user entry.
                  groupSearch:
                    # BaseDN to start the search from. It will translate to the query
                    # "(&(objectClass=groupOfUniqueNames)(uniqueMember=<user uid>))".
                    baseDN: ou=Gruppen,dc=evermind,dc=de
                    # Optional filter to apply when searching the directory.
                    # filter: "(objectClass=groupOfUniqueNames)"
                    # Following list contains field pairs that are used to match a user to a group. It adds an additional
                    # requirement to the filter that an attribute in the group must match the user's
                    # attribute value.
                    userMatchers:
                    - userAttr: DN
                      groupAttr: uniqueMember
                    # Represents group name.
                    nameAttr: cn

    additionalApplications:
        - name: app-bootstrap
          # namespace: istio-operator
          #   additionalLabels: {}
          #   additionalAnnotations: {}
          project: default
          source:
            repoURL: https://github.com/realestatepilot/argocd-testbed.git
            targetRevision: main
            path: "argocd-apps/"
            directory:
              recurse: true
          destination:
            server: https://kubernetes.default.svc
            namespace: nginx
          syncPolicy:
            automated:
                prune: true
                selfHeal: true


repoServer:
    # extraArgs:
    #     - --repo-cache-expiration
    #     - 10m
    ## Additional volumeMounts for gpg key import

  env:
    - name: HELM_PLUGINS
      value: /custom-tools/helm-plugins/
    - name: HELM_SECRETS_HELM_PATH
      value: /usr/local/bin/helm
    - name: HELM_SECRETS_SOPS_PATH
      value: /custom-tools/sops
    - name: HELM_SECRETS_KUBECTL_PATH
      value: /custom-tools/kubectl
    # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
    - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
      value: "false"
    - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
      value: "false"
    - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
      value: "false"      
  volumes:
    - name: custom-tools
      emptyDir: {}
    - name: gpg-secret
      secret:
        secretName: gpg-key
        # secretName: tenant1.key.gpg
    - name: age-secret
      secret:
        secretName: age-key
        # secretName: tenant1.key.age
  volumeMounts:
    - mountPath: /custom-tools
      name: custom-tools
    - name: gpg-secret
      mountPath: /tenant1.key.gpg
      subPath: tenant1.key.gpg
    - name: age-secret
      mountPath: /tenant1.key.age
      subPath: tenant1.key.age

  initContainers:
    - name: download-tools
      image: alpine:latest
      command: [sh, -ec]
      env:
        - name: HELM_SECRETS_VERSION
          value: "3.12.0"
        - name: SOPS_VERSION
          value: "3.7.2"
        - name: KUBECTL_VERSION
          value: "1.23.0"
      args:
        - |
          mkdir -p /custom-tools/helm-plugins
          wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /custom-tools/helm-plugins -xzf-;

          wget -qO /custom-tools/sops https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux
          wget -qO /custom-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl

          chmod +x /custom-tools/*
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools